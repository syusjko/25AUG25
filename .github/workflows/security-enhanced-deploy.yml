# .github/workflows/security-enhanced-deploy.yml
name: Security Enhanced Deployment

on:
  workflow_call:
    inputs:
      service_path:
        required: true
        type: string
      aws_region:
        required: false
        type: string
        default: 'ap-northeast-2'
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      TF_VARS:
        required: false

jobs:
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: python, javascript, typescript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: security-scan
    defaults:
      run:
        working-directory: ${{ inputs.service_path }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ inputs.aws_region }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Create terraform.tfvars file
        if: ${{ secrets.TF_VARS != '' }}
        run: echo '${{ secrets.TF_VARS }}' > terraform.tfvars

      - name: Terraform Init
        run: terraform init

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -out=tfplan

      - name: Upload Terraform Plan
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan-${{ inputs.service_path }}
          path: ${{ inputs.service_path }}/tfplan

  manual-approval:
    name: Manual Approval Required
    runs-on: ubuntu-latest
    needs: terraform-plan
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Manual Approval
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ github.TOKEN }}
          approvers: ${{ github.actor }}
          minimum-approvals: 1
          issue-title: "Deploy ${{ inputs.service_path }} to Production"
          issue-body: |
            ## Deployment Approval Required
            
            **Service:** ${{ inputs.service_path }}
            **Branch:** ${{ github.ref_name }}
            **Commit:** ${{ github.sha }}
            **Author:** ${{ github.actor }}
            
            Please review the Terraform plan and approve this deployment.
            
            ### Security Scan Results
            - CodeQL Analysis: âœ… Passed
            - Trivy Vulnerability Scan: âœ… Completed
            
            ### Next Steps
            1. Review the Terraform plan in the previous job
            2. Approve this deployment if everything looks correct
            3. The deployment will proceed automatically after approval

  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: [terraform-plan, manual-approval]
    if: github.ref == 'refs/heads/main'
    defaults:
      run:
        working-directory: ${{ inputs.service_path }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ inputs.aws_region }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Create terraform.tfvars file
        if: ${{ secrets.TF_VARS != '' }}
        run: echo '${{ secrets.TF_VARS }}' > terraform.tfvars

      - name: Terraform Init
        run: terraform init

      - name: Download Terraform Plan
        uses: actions/download-artifact@v4
        with:
          name: terraform-plan-${{ inputs.service_path }}
          path: ${{ inputs.service_path }}

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan

      - name: Deployment Notification
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          text: |
            ðŸš€ Deployment ${{ job.status }} for ${{ inputs.service_path }}
            Branch: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
